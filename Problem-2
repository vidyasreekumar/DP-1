// Time Complexity : O(n)
// Space Complexity : O(1)

// The maximum value that can be robbed will be the max of robbing the previous house or the current value of the house and the value robbed 1 house before
// Keep track of the value robbed for 2 houses behind

class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if(n == 1)
            return nums[0];
        int prev2 = nums[0]; // 1 house away
        int prev1 = Math.max(nums[0], nums[1]); // previous house
        int curr = prev1 ;

        for(int i = 2; i < n; i++) {
            curr = Math.max(prev1, nums[i] + prev2);
            prev2 = prev1;
            prev1 = curr;
        }

        return curr;
    }
}